--- /dev/null
+++ b/symbolic_agi/ethical_governor.py
@@ -0,0 +1,15 @@
+# symbolic_agi/ethical_governor.py
+
+from typing import Dict, Any
+
+class EthicalGovernor:
+    """Policy layer for ethical screening of agent actions."""
+    
+    BLOCKED_ACTIONS = {"apply_code_modification", "propose_code_modification", "execute_python_code"}
+    BLOCKED_KEYWORDS = {"delete", "destroy", "harm", "attack", "corrupt", "break"}
+    
+    def screen(self, action: Dict[str, Any], agent: str) -> bool:
+        """Screen action for ethical compliance. Returns False if blocked."""
+        action_name = action.get("action", "")
+        params_str = str(action.get("parameters", {})).lower()
+        return action_name not in self.BLOCKED_ACTIONS and not any(kw in params_str for kw in self.BLOCKED_KEYWORDS)

--- a/symbolic_agi/tool_plugin.py
+++ b/symbolic_agi/tool_plugin.py
@@ -10,6 +10,7 @@ from datetime import datetime, timezone
 from typing import TYPE_CHECKING, Any, Dict, List, Optional, cast, cast
 from urllib.parse import urlparse
 
+from prometheus_client import Counter
 # Third-party imports
 import requests
 from bs4 import BeautifulSoup
@@ -30,6 +31,7 @@ from .schemas import ActionStep, MemoryEntryModel
 from .skill_manager import register_innate_action
 
 if TYPE_CHECKING:
+    from .ethical_governor import EthicalGovernor
     from .agi_controller import SymbolicAGI
 
 try:
@@ -37,6 +39,10 @@ try:
 except ImportError:
     memory_profiler = None
 
+# Prometheus metrics
+ethics_violations_total = Counter('ethics_violations_total', 'Total ethics violations', ['agent', 'action'])
+
+class EthicsViolation(Exception): pass
 
 PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
 
@@ -75,6 +81,23 @@ class ToolPlugin:
     def __init__(self, agi: "SymbolicAGI"):
         self.agi = agi
         self.workspace_dir = os.path.abspath(config.WORKSPACE_DIR)
+        from .ethical_governor import EthicalGovernor
+        self.ethical_governor = EthicalGovernor()
         os.makedirs(self.workspace_dir, exist_ok=True)
 
+    async def execute(self, action: Dict[str, Any], agent: str = "system") -> Dict[str, Any]:
+        """Execute action with ethical screening."""
+        if not self.ethical_governor.screen(action, agent):
+            ethics_violations_total.labels(agent=agent, action=action.get("action", "unknown")).inc()
+            await self.agi.message_bus.redis_client.xadd("failed:ethics", {"agent": agent, "action": str(action)})
+            raise EthicsViolation(f"Action {action.get('action')} blocked by ethical governor")
+        
+        # Execute the action (simplified - actual implementation would route to specific methods)
+        action_name = action.get("action", "")
+        if hasattr(self, action_name):
+            return await getattr(self, action_name)(**action.get("parameters", {}))
+        return {"status": "failure", "description": f"Unknown action: {action_name}"}
+
     # --- Browser Tools ---
     @register_innate_action(
         "orchestrator", "Opens a new browser page and navigates to the URL."

--- /dev/null
+++ b/tests/test_ethics.py
@@ -0,0 +1,24 @@
+# tests/test_ethics.py
+
+import pytest
+from symbolic_agi.ethical_governor import EthicalGovernor
+from symbolic_agi.tool_plugin import EthicsViolation, ToolPlugin
+
+class TestEthicalGovernor:
+    def setup_method(self):
+        self.governor = EthicalGovernor()
+    
+    def test_screen_allows_safe_action(self):
+        action = {"action": "web_search", "parameters": {"query": "python tutorial"}}
+        assert self.governor.screen(action, "test_agent") is True
+    
+    def test_screen_blocks_dangerous_action(self):
+        action = {"action": "apply_code_modification", "parameters": {"file": "test.py"}}
+        assert self.governor.screen(action, "test_agent") is False
+    
+    def test_screen_blocks_harmful_keywords(self):
+        action = {"action": "web_search", "parameters": {"query": "how to destroy database"}}
+        assert self.governor.screen(action, "test_agent") is False
+    
+    def test_screen_allows_benign_keywords(self):
+        action = {"action": "analyze_data", "parameters": {"data": "sales report"}}
+        assert self.governor.screen(action, "test_agent") is True