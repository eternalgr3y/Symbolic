[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "symbolic-agi"
version = "0.1.0"
description = "A symbolic AGI system with consciousness, meta-cognition, and self-modification capabilities"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "MIT"
keywords = ["agi", "ai", "consciousness", "symbolic", "meta-cognition"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = ">=3.10"
redis = ">=4.5.0"
numpy = ">=1.24.0"
faiss-cpu = ">=1.7.0"
pydantic = ">=2.0.0"
openai = ">=1.0.0"
anthropic = ">=0.7.0"
selenium = ">=4.0.0"
colorlog = ">=6.7.0"
prometheus-client = ">=0.16.0"
aiofiles = ">=23.0.0"
aiohttp = ">=3.8.0"
fastapi = ">=0.100.0"
uvicorn = ">=0.23.0"
httpx = ">=0.24.0"
requests = ">=2.31.0"
beautifulsoup4 = ">=4.12.0"
aiosqlite = ">=0.19.0"
playwright = ">=1.40.0"
pytest = ">=7.0.0"
pytest-asyncio = ">=0.21.0"
pytest-mock = ">=3.10.0"
pytest-cov = ">=4.1.0"
pytest-timeout = ">=2.1.0"
pytest-xdist = ">=3.3.0"
grep = ">=0.3.0"

[tool.poetry.group.dev.dependencies]
mypy = ">=1.5.0"
ruff = ">=0.1.0"
black = ">=23.0.0"
pytest-cov = ">=4.1.0"
pre-commit = ">=3.3.0"

[tool.poetry.scripts]
symbolic-agi = "symbolic_agi.run_agi:main"

[tool.poetry.urls]
Homepage = "https://github.com/yourusername/symbolic-agi"
Repository = "https://github.com/yourusername/symbolic-agi"
Issues = "https://github.com/yourusername/symbolic-agi/issues"

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py310"
src = ["symbolic_agi", "tests"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
]

ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "B904",   # within an except clause, raise exceptions with raise ... from err
    "C901",   # function is too complex
    "W191",   # indentation contains tabs
    "E402",   # module level import not at top of file
    "UP007",  # Use X | Y for type annotations (keep Union for compatibility)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # asserts allowed in tests
    "ARG",    # unused function args -> fixtures nevertheless are functionally relevant
    "FBT",    # don't care about booleans as positional arguments in tests
    "PLR2004", # Magic value used in comparison, ...
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.ruff.lint.isort]
known-first-party = ["symbolic_agi"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "faiss.*",
    "tortoise.*",
    "selenium.*",
    "redis.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=symbolic_agi",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
    
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["symbolic_agi"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Black configuration (if you want to use it alongside ruff)
[tool.black]
line-length = 100
target-version = ["py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
