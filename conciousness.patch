--- a/symbolic_agi/consciousness.py
+++ b/symbolic_agi/consciousness.py
@@ -18,11 +18,36 @@ if TYPE_CHECKING:
     from .symbolic_memory import SymbolicMemory
 
 
+class EmotionalState:
+    """Represents the AGI's emotional state."""
+    def __init__(self):
+        self.frustration: float = 0.0
+        self.excitement: float = 0.5
+        self.confidence: float = 0.7
+        self.anxiety: float = 0.2
+        
+    def to_dict(self) -> Dict[str, float]:
+        return {
+            "frustration": self.frustration,
+            "excitement": self.excitement,
+            "confidence": self.confidence,
+            "anxiety": self.anxiety
+        }
+    
+    def from_dict(self, data: Dict[str, float]) -> None:
+        self.frustration = data.get("frustration", 0.0)
+        self.excitement = data.get("excitement", 0.5)
+        self.confidence = data.get("confidence", 0.7)
+        self.anxiety = data.get("anxiety", 0.2)
+
+
 class Consciousness:
     """Manages the AGI's narrative self-model and core drives."""
 
     def __init__(self, db_path: str = config.DB_PATH):
         self._db_path = db_path
         self.drives: Dict[str, float] = {}
         self.life_story: Deque[LifeEvent] = deque(maxlen=200)
+        self.emotional_state = EmotionalState()
         self._is_dirty: bool = False
         self._save_lock = asyncio.Lock()
@@ -56,6 +81,13 @@ class Consciousness:
                 )
                 """
             )
+            await db.execute(
+                """
+                CREATE TABLE IF NOT EXISTS consciousness_emotional_state (
+                    emotion TEXT PRIMARY KEY,
+                    value REAL NOT NULL
+                )
+                """
+            )
             await db.commit()
 
     async def _load_state(self) -> None:
@@ -76,6 +108,13 @@ class Consciousness:
                 else:
                     self.drives = {row[0]: row[1] for row in rows}
 
+            # Load emotional state
+            async with db.execute("SELECT emotion, value FROM consciousness_emotional_state") as cursor:
+                rows = await cursor.fetchall()
+                if rows:
+                    emotional_data = {row[0]: row[1] for row in rows}
+                    self.emotional_state.from_dict(emotional_data)
+
             # Load life story
             async with db.execute(
                 "SELECT timestamp, summary, importance FROM consciousness_life_story ORDER BY timestamp DESC LIMIT 200"
@@ -98,6 +137,11 @@ class Consciousness:
                         "INSERT OR REPLACE INTO consciousness_drives (drive_name, value) VALUES (?, ?)",
                         self.drives.items(),
                     )
+                    # Save emotional state
+                    await db.executemany(
+                        "INSERT OR REPLACE INTO consciousness_emotional_state (emotion, value) VALUES (?, ?)",
+                        self.emotional_state.to_dict().items(),
+                    )
                     # Save life story (by clearing and re-inserting the deque)
                     await db.execute("DELETE FROM consciousness_life_story")
                     await db.executemany(
@@ -186,6 +230,52 @@ Write an inner monologue in first person ("I..."). Describe your state of mind,
         await self._save_state()
         return monologue
 
+    async def regulate_emotional_extremes(self) -> None:
+        """Prevent emotional states from causing poor decisions"""
+        regulated = False
+        
+        if self.emotional_state.frustration > 0.8:
+            await self.inner_monologue("Taking a step back to reassess...")
+            self.emotional_state.frustration *= 0.7
+            self.emotional_state.anxiety *= 0.8
+            regulated = True
+            logging.info("Emotional regulation: Reduced frustration from extreme levels")
+            
+        if self.emotional_state.anxiety > 0.85:
+            await self.inner_monologue("Breathing deeply, focusing on what I can control...")
+            self.emotional_state.anxiety *= 0.6
+            self.emotional_state.confidence = min(1.0, self.emotional_state.confidence * 1.2)
+            regulated = True
+            logging.info("Emotional regulation: Reduced anxiety from extreme levels")
+            
+        if self.emotional_state.confidence > 0.95:
+            await self.inner_monologue("Maintaining humility and considering potential pitfalls...")
+            self.emotional_state.confidence *= 0.85
+            regulated = True
+            logging.info("Emotional regulation: Moderated overconfidence")
+            
+        if regulated:
+            self._is_dirty = True
+            await self._save_state()
+    
+    async def inner_monologue(self, thought: str) -> None:
+        """Records an inner thought without full reflection"""
+        self.add_life_event(f"Inner thought: {thought}", importance=0.6)
+        await self._save_state()
+    
+    def update_emotional_state_from_outcome(self, success: bool, task_difficulty: float = 0.5) -> None:
+        """Updates emotional state based on task outcomes"""
+        if success:
+            self.emotional_state.frustration *= 0.7
+            self.emotional_state.anxiety *= 0.8
+            self.emotional_state.confidence = min(1.0, self.emotional_state.confidence + 0.1 * task_difficulty)
+            self.emotional_state.excitement = min(1.0, self.emotional_state.excitement + 0.15)
+        else:
+            self.emotional_state.frustration = min(1.0, self.emotional_state.frustration + 0.2 * task_difficulty)
+            self.emotional_state.anxiety = min(1.0, self.emotional_state.anxiety + 0.1)
+            self.emotional_state.confidence *= 0.9
+            self.emotional_state.excitement *= 0.8
+        self._is_dirty = True
+
     def update_drives_from_experience(
         self, experience_type: str, success: bool, intensity: float = 0.1
     ) -> None: